from datetime import datetime

# Classe para gerenciar a conta banc√°ria
class ContaBancaria:
    def __init__(self):
        self.saldo = 0.0
        self.extrato = []
        self.limite_saque = 500.0
        self.limite_saques_diarios = 3
        self.saques_realizados = 0

    def depositar(self, valor):
        if valor > 0:
            self.saldo += valor
            self.extrato.append(f"{datetime.now().strftime('%d/%m/%Y %H:%M:%S')} - Dep√≥sito: R$ {valor:.2f}")
            print(f"‚úÖ Dep√≥sito de R$ {valor:.2f} realizado com sucesso.")
        else:
            print("‚ùå Valor de dep√≥sito inv√°lido.")

    def sacar(self, valor):
        if self.saques_realizados >= self.limite_saques_diarios:
            print("‚ùå Limite di√°rio de saques atingido.")
        elif valor > self.limite_saque:
            print(f"‚ùå Saque excede o limite de R$ {self.limite_saque:.2f}.")
        elif valor > self.saldo:
            print("‚ùå Saldo insuficiente.")
        elif valor > 0:
            self.saldo -= valor
            self.saques_realizados += 1
            self.extrato.append(f"{datetime.now().strftime('%d/%m/%Y %H:%M:%S')} - Saque: R$ {valor:.2f}")
            print(f"‚úÖ Saque de R$ {valor:.2f} realizado com sucesso.")
        else:
            print("‚ùå Valor de saque inv√°lido.")

    def exibir_extrato(self):
        print("\n========== EXTRATO ==========")
        if not self.extrato:
            print("‚ö†Ô∏è  Nenhuma movimenta√ß√£o registrada.")
        else:
            for item in self.extrato:
                print(item)
        print(f"\nüí∞ Saldo atual: R$ {self.saldo:.2f}")
        print("=============================\n")

# Classe para gerenciar os usu√°rios
class Usuario:
    def __init__(self, nome, senha):
        self.nome = nome
        self.senha = senha
        self.conta = ContaBancaria()

# Base simulada de usu√°rios (simula√ß√£o de banco de dados)
usuarios = {}

# Fun√ß√µes auxiliares
def cadastrar_usuario():
    nome = input("Escolha um nome de usu√°rio: ")
    if nome in usuarios:
        print("‚ùå Nome j√° est√° em uso.")
        return
    senha = input("Defina uma senha: ")
    usuarios[nome] = Usuario(nome, senha)
    print("‚úÖ Cadastro realizado com sucesso.")

def autenticar_usuario():
    nome = input("Usu√°rio: ")
    senha = input("Senha: ")
    usuario = usuarios.get(nome)
    if usuario and usuario.senha == senha:
        print(f"‚úÖ Bem-vindo, {nome}!")
        return usuario
    else:
        print("‚ùå Usu√°rio ou senha incorretos.")
        return None

# Menu principal
def menu_principal():
    while True:
        print("\n=== BANCO PYTHON ===")
        print("[1] Cadastrar novo usu√°rio")
        print("[2] Login")
        print("[0] Sair")
        opcao = input("Escolha uma op√ß√£o: ")

        if opcao == "1":
            cadastrar_usuario()
        elif opcao == "2":
            usuario = autenticar_usuario()
            if usuario:
                menu_usuario(usuario)
        elif opcao == "0":
            print("üëã At√© logo!")
            break
        else:
            print("‚ùå Op√ß√£o inv√°lida.")

# Menu do usu√°rio logado
def menu_usuario(usuario):
    while True:
        print(f"\n=== Conta de {usuario.nome} ===")
        print("[1] Depositar")
        print("[2] Sacar")
        print("[3] Ver Extrato")
        print("[0] Logout")
        opcao = input("Escolha uma op√ß√£o: ")

        if opcao == "1":
            try:
                valor = float(input("Valor do dep√≥sito: R$ "))
                usuario.conta.depositar(valor)
            except ValueError:
                print("‚ùå Entrada inv√°lida.")
        elif opcao == "2":
            try:
                valor = float(input("Valor do saque: R$ "))
                usuario.conta.sacar(valor)
            except ValueError:
                print("‚ùå Entrada inv√°lida.")
        elif opcao == "3":
            usuario.conta.exibir_extrato()
        elif opcao == "0":
            print(f"üîí Logout de {usuario.nome} realizado.")
            break
        else:
            print("‚ùå Op√ß√£o inv√°lida.")

# Inicia o programa
menu_principal()
